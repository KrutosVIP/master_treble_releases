From 05419254092d15fad05ea1de94d0ad1971bdb9ef Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Wed, 20 Oct 2021 09:39:47 -0400
Subject: [PATCH 10/10] Try to fallback mCallingSid to getpidcon

This is needed because old vendors (before April 2019 ~) don't support
reporting SELinux context of the caller.
This doesn't work for all processes, because it requires some additional
SELinux permissions. At the moment, only keystore2 requires this

As a rule of thumb, assume only 3.18 kernel are old enough to have that
issue.
That's not strictly accurate, there have also been 4.4 kernels with that
issue (maybe even 4.9?). But let's assume that devices with >=4.4
kernels have got an upgrade after April 2019

Change-Id: I3b6c4dac9d0e20a3d66f931b283e3a535ab499cd
---
 libs/binder/.IPCThreadState.cpp.rej.swp | Bin 0 -> 1024 bytes
 libs/binder/IPCThreadState.cpp          |  49 ++++++++++++++++++++++
 libs/binder/IPCThreadState.cpp.rej      |  53 ++++++++++++++++++++++++
 3 files changed, 102 insertions(+)
 create mode 100644 libs/binder/.IPCThreadState.cpp.rej.swp
 create mode 100644 libs/binder/IPCThreadState.cpp.rej

diff --git a/libs/binder/.IPCThreadState.cpp.rej.swp b/libs/binder/.IPCThreadState.cpp.rej.swp
new file mode 100644
index 0000000000000000000000000000000000000000..0b535b285341481141ecd14efc9897d98f1929c4
GIT binary patch
literal 1024
zcmYc?$V<%2S1{8vVn6|<ii`|trA0-RX{otM`IRVg=$yo){G>#5K`i{VqQu<P^8BLg
zV*R|tlFYJHeLel0%%o!dq|CgO)FOS)0Oyd5qSVBc;F83WRK4Va0==TtEG!0%3XO)q
JXb4ax1OR@?9!~%O

literal 0
HcmV?d00001

diff --git a/libs/binder/IPCThreadState.cpp b/libs/binder/IPCThreadState.cpp
index da58251..74922aa 100644
--- a/libs/binder/IPCThreadState.cpp
+++ b/libs/binder/IPCThreadState.cpp
@@ -35,8 +35,10 @@
 #include <sched.h>
 #include <signal.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <sys/ioctl.h>
 #include <sys/resource.h>
+#include <sys/utsname.h>
 #include <unistd.h>
 
 #include "binder_module.h"
@@ -1271,6 +1273,25 @@ void IPCThreadState::setTheContextObject(const sp<BBinder>& obj)
     the_context_object = obj;
 }
 
+static bool _supportsSid;
+static bool _supportsSid_done;
+static void supportsSid() {
+    if (_supportsSid_done) return;
+    //Put a threshold at >= 4.0
+    struct utsname buf;
+    uname(&buf);
+    const char *where = buf.release;
+    int a = strtol(where, NULL, 10);
+    ALOGE("Got kernel major version %d", a);
+    if(a <= 3) {
+        _supportsSid = false;
+    } else {
+        _supportsSid = true;
+    }
+    _supportsSid_done = true;
+
+}
+
 status_t IPCThreadState::executeCommand(int32_t cmd)
 {
     BBinder* obj;
@@ -1398,6 +1419,33 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
             mHasExplicitIdentity = false;
             mLastTransactionBinderFlags = tr.flags;
 
+            if (mCallingSid != nullptr) {
+                _supportsSid = true;
+                _supportsSid_done = true;
+            }
+            supportsSid();
+
+            // This is recoding libselinux's getpidcon()
+            // We are in a NDK lib, so we need to keep changes to a minimum
+            bool allocatedSid = false;
+            if (!_supportsSid && mCallingSid == nullptr && mCallingPid != 0) {
+                char buf[4096];
+                char *path = NULL;
+                (void)asprintf(&path, "/proc/%d/attr/current", mCallingPid);
+                int fd = open(path, O_RDONLY | O_CLOEXEC);
+                if (fd != -1) {
+                    int readRet = read(fd, buf, sizeof(buf)-1);
+                    if(readRet != -1) {
+                        buf[readRet] = 0;
+                        mCallingSid = strdup(buf);
+                        allocatedSid = true;
+                    }
+                    close(fd);
+                }
+                free(path);
+            }
+
+
             // ALOGI(">>>> TRANSACT from pid %d sid %s uid %d\n", mCallingPid,
             //    (mCallingSid ? mCallingSid : "<N/A>"), mCallingUid);
 
@@ -1469,6 +1517,7 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
 
             mServingStackPointer = origServingStackPointer;
             mCallingPid = origPid;
+            if (allocatedSid) free((void*)mCallingSid);
             mCallingSid = origSid;
             mCallingUid = origUid;
             mHasExplicitIdentity = origHasExplicitIdentity;
diff --git a/libs/binder/IPCThreadState.cpp.rej b/libs/binder/IPCThreadState.cpp.rej
new file mode 100644
index 0000000..8aa3be7
--- /dev/null
+++ b/libs/binder/IPCThreadState.cpp.rej
@@ -0,0 +1,53 @@
+diff a/libs/binder/IPCThreadState.cpp b/libs/binder/IPCThreadState.cpp	(rejected hunks)
+@@ -35,8 +35,10 @@
+ #include <sched.h>
+ #include <signal.h>
+ #include <stdio.h>
++#include <stdlib.h>
+ #include <sys/ioctl.h>
+ #include <sys/resource.h>
++#include <sys/utsname.h>
+ #include <unistd.h>
+ 
+ #include "Static.h"
+@@ -1269,6 +1290,32 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
+             mCallingUid = tr.sender_euid;
+             mLastTransactionBinderFlags = tr.flags;
+ 
++            if (mCallingSid != nullptr) {
++                _supportsSid = true;
++                _supportsSid_done = true;
++            }
++            supportsSid();
++
++            // This is recoding libselinux's getpidcon()
++            // We are in a NDK lib, so we need to keep changes to a minimum
++            bool allocatedSid = false;
++            if (!_supportsSid && mCallingSid == nullptr && mCallingPid != 0) {
++                char buf[4096];
++                char *path = NULL;
++                (void)asprintf(&path, "/proc/%d/attr/current", mCallingPid);
++                int fd = open(path, O_RDONLY | O_CLOEXEC);
++                if (fd != -1) {
++                    int readRet = read(fd, buf, sizeof(buf)-1);
++                    if(readRet != -1) {
++                        buf[readRet] = 0;
++                        mCallingSid = strdup(buf);
++                        allocatedSid = true;
++                    }
++                    close(fd);
++                }
++                free(path);
++            }
++
+             // ALOGI(">>>> TRANSACT from pid %d sid %s uid %d\n", mCallingPid,
+             //    (mCallingSid ? mCallingSid : "<N/A>"), mCallingUid);
+ 
+@@ -1333,6 +1380,7 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
+ 
+             mServingStackPointer = origServingStackPointer;
+             mCallingPid = origPid;
++            if (allocatedSid) free((void*)mCallingSid);
+             mCallingSid = origSid;
+             mCallingUid = origUid;
+             mStrictModePolicy = origStrictModePolicy;
-- 
2.34.1

